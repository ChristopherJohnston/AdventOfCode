#!/usr/bin/env python
import argparse
import sys
import os
import requests
import datetime
import json

def main():
    parser = argparse.ArgumentParser(
        prog='setup',
        description="Daily setup script"
    )
    today = datetime.date.today()
    parser.add_argument('day', type=str, help="The day to set up.")
    parser.add_argument('--year', type=str, help="The year to set up")
    parser.add_argument('--part', type=str, help="The part of the day.")
    parser.add_argument('--no-input', dest='noinput', action='store_true', help="Prevents the puzzle input from being downloaded")
    parser.add_argument('--reset', dest='reset', action='store_true', help="Resets the day")
    parser.set_defaults(year=today.year, part=1, noinput=False, reset=False)
    args = parser.parse_args()

    if args.reset:
        os.system(f"rm -r Day{args.day}")
        os.system(f"git checkout master")
        os.system(f"git branch -d {args.year}_Day{args.day}_Part{args.part}")
        return
    
    # Checkout new branch and create the solution
    os.system(f"git checkout -b {args.year}_Day{args.day}_Part{args.part}")
    os.system(f"dotnet new sln -o Day{args.day}")
    os.system(f"cp ./scripts/.gitignore ./Day{args.day}/.gitignore")

    # Append the day to the Year's workspace
    with open("workspace.code-workspace", "r") as f:
        s = json.loads(''.join(f.readlines()))
        if "folders" not in s:
            s["folders"] = []

        s["folders"].append({"path": f"Day{args.day}"})

    with open("workspace.code-workspace", "w") as f:
        f.write(json.dumps(s))

    os.chdir(f"./Day{args.day}")
    os.system("dotnet new console -o app")
    os.system("dotnet sln add app/app.csproj")
    os.system("dotnet add app/app.csproj reference ../../Common/Common/Common.csproj")
    os.system('touch input.txt')
    os.system('touch example.txt')

    # Retrieve the day's input and save to input.txt
    if args.noinput == False:
        with requests.Session() as s:
            s.cookies.set("session", os.environ['AOC_SESSION'])
            with open("input.txt", "w") as f:
                f.writelines(s.get(f"https://adventofcode.com/{args.year}/day/{args.day}/input").content.decode("utf-8"))

    # Add code workspace for the day
    workspaceFile = f"Day{args.day}-workspace.code-workspace"
    workspaceSettings = {
	    "folders": [
            {
                "path": "."
            },
            {
                "path": "../../Common"
            },
            {
                "path": "../scripts"
            }
	    ],
	    "settings": {
            "files.exclude": {
                "**/bin/": True,
                "**/obj": True,
                "**/.gitignore": True
            }
        }
    }

    with open(workspaceFile, "w") as f:
        f.write(json.dumps(workspaceSettings))

    # Create launch configuration for the project so we can debug
    os.mkdir(".vscode")

    launchFile = {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "Debug Input",
                "type": "coreclr",
                "request": "launch",
                "preLaunchTask": "build",
                "program": "${workspaceFolder}/app/bin/Debug/net6.0/app.dll",
                "args": [],
                "cwd": "${workspaceFolder}",
                "console": "internalConsole",
                "stopAtEntry": False,
                "group": {
                    "kind": "build",
                    "isDefault": True
                }
            },
            {
                "name": "Debug Example",
                "type": "coreclr",
                "request": "launch",
                "preLaunchTask": "build",
                "program": "${workspaceFolder}/app/bin/Debug/net6.0/app.dll",
                "args": ["example.txt"],
                "cwd": "${workspaceFolder}",
                "console": "internalConsole",
                "stopAtEntry": False
            }
        ]
    }

    with open(f".vscode/launch.json", "w") as f:
        f.write(json.dumps(launchFile))

    tasksFile = {
        "version": "2.0.0",
        "tasks": [
            {
                "label": "build",
                "command": "dotnet",
                "type": "process",
                "args": [
                    "build",
                    "${workspaceFolder}/app/app.csproj",
                    "/property:GenerateFullPaths=true",
                    "/consoleloggerparameters:NoSummary"
                ],
                "problemMatcher": "$msCompile"
            },
            {
                "label": "leaderboard",
                "command": "../scripts/leaderboard",
                "type": "process"
            },
            {
                "label": "input", 
                "command": "../scripts/get_input", "type": "process"
            },
            {
                "label": "run_example",
                "command": "dotnet",
                "args": ["run", "-p", "${workspaceFolder}/app/app.csproj", "example.txt"],
                "problemMatcher": "$msCompile"
            },
            {
                "label": "run",
                "command": "dotnet",
                "args": ["run", "-p", "${workspaceFolder}/app/app.csproj"], "problemMatcher": "$msCompile"
            } 
        ]
    }

    with open(f".vscode/tasks.json", "w") as f:
        f.write(json.dumps(tasksFile))


    # Finally, open the workspace in VSCode and the puzzle in safari
    os.system(f"code ../workspace.code-workspace")
    os.system(f"open https://adventofcode.com/{args.year}/day/{args.day}")
    
if __name__ == '__main__':
    main()
